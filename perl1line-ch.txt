用 Perl 实现的有用的单行程序                            1   28 2012 | 版本 1.08
--------------------------------                    -----------   ------------

由 Peteris Krumins 编译 (peter@catonmat.net, @pkrumins on Twitter)
http://www.catonmat.net -- good coders code, great reuse

此文件最新版的总可以在下面的这个链接里获得:

    http://www.catonmat.net/download/perl1line.txt

此文件也有其它语言的:	
This file is also available in other languages:
	 (暂时还没有)
	 (如果您想翻译的话, 请与我 peter@catonmat.net 联系)

Github 上的 Perl 单行程序:	 
 
    https://github.com/pkrumins/perl1line.txt

	你可以给我发送推送请求! 我接受问题修复,
	新的单行代码,翻译和其它相关的所有东西.

在这个文件的基础上,我还写了一本 "Perl 单行程序" 的电子书,
它对这个文件里的所有单行做了解释.从下面这个链接里获去它:

    http://www.catonmat.net/blog/perl-book/

这些单行程序可以同时在 UNIX 系统和 Windows 系统使用.很可能你的 UNIX 系统
已经安装好了 Perl. 对 Windows 用户,您可以从下面链接获取草莓 Perl:

    http://www.strawberryperl.com/

目录:

    1. 文件 spacing
    2. 行号
    3. 计算
    4. 创建字符串和数组
    5. 文本转换和替换
    6. 选择性的打印和删除某些行
    7. 方便的正则
    8. Perl 诀窍


文件 SPACING 
------------

# 对一个文件的每行两个换行符
perl -pe '$\="\n"'
perl -pe 'BEGIN { $\="\n" }'
perl -pe '$_ .= "\n"'
perl -pe 's/$/\n/'

# 对一个文件每行除了空行,其它行都有两个换行符
perl -pe '$_ .= "\n" unless /^$/'
perl -pe '$_ .= "\n" if /\S/'

# 对一个文件每行使用三个换行符
perl -pe '$\="\n\n"'
perl -pe '$_.="\n\n"'

# 给一个文件加入多个换行符
perl -pe '$_.="\n"x7'

# 每一行前斗加入一个换行符
perl -pe 's//\n/'

# 去掉所有空行
perl -ne 'print unless /^$/'
perl -lne 'print if length'
perl -ne 'print if /\S/'

# 对于所有连续的空行,只保留一行空行,其它的全部去掉
perl -00 -pe ''
perl -00pe0

# 压缩/展开所有的空行为多个连续的空行
perl -00 -pe '$_.="\n"x4'

# 对一个文件的每 10 行,都使用 Tab 键分隔开
perl -lpe '$\ = $. % 10 ? "\t" : "\n"'


行 NUMBERING
--------------

# 给文件的每行都加上行号
perl -pe '$_ = "$. $_"'

# 给文件的的非空行加上行号
perl -pe '$_ = ++$a." $_" if /./'

# 给非空白的行加上行号并打印(丢掉空行)
perl -ne 'print ++$a." $_" if /./'

# 给所有行都加上行号,但是只有非空行打印行号
perl -pe '$_ = "$. $_" if /./'

# 给只出现某个正则的行加上行号,打印其它未修改的
perl -pe '$_ = ++$a." $_" if /regex/'

# 给只包含某个正则的行添加行号并打印
perl -ne 'print ++$a." $_" if /regex/'

# 给所有行添加行号,但是只对包含某个正则的行打印行号
perl -pe '$_ = "$. $_" if /regex/'

# 给所有行使用指定的格式添加行号(模拟 cat -n)
perl -ne 'printf "%-5d %s", $., $_'

# 打印一个文件的总行数(模拟 wc -l)
perl -lne 'END { print $. }'
perl -le 'print $n=()=<>'
perl -le 'print scalar(()=<>)'
perl -le 'print scalar(@foo=<>)'
perl -ne '}{print $.'
perl -nE '}{say $.'

# 打印一个文件非空白行的总和
perl -le 'print scalar(grep{/./}<>)'
perl -le 'print ~~grep{/./}<>'
perl -le 'print~~grep/./,<>'
perl -E 'say~~grep/./,<>'

# 打印一个文件空白行的总和
perl -lne '$a++ if /^$/; END {print $a+0}'
perl -le 'print scalar(grep{/^$/}<>)'
perl -le 'print ~~grep{/^$/}<>'
perl -E 'say~~grep{/^$/}<>'

# 打印一个文件里匹配某个模式的总行数(模拟 grep -c)
Print the number of lines in a file that match a pattern (emulate grep -c)
perl -lne '$a++ if /regex/; END {print $a+0}'
perl -nE '$a++ if /regex/; END {say $a+0}'


计算
------------

# 判断一个数是否是质数
perl -lne '(1x$_) !~ /^1?$|^(11+?)\1+$/ && print "$_ is prime"'

# 对一行的所有字段求和
perl -MList::Util=sum -alne 'print sum @F'

# 对所有行的所有字段求和
perl -MList::Util=sum -alne 'push @S,@F; END { print sum @S }'
perl -MList::Util=sum -alne '$s += sum @F; END { print $s }'

# 打乱一行所有字段的顺序
perl -MList::Util=shuffle -alne 'print "@{[shuffle @F]}"'
perl -MList::Util=shuffle -alne 'print join " ", shuffle @F'

# 打印一行中的最小的字段
perl -MList::Util=min -alne 'print min @F'

# 打印所有行最小的字段
perl -MList::Util=min -alne '@M = (@M, @F); END { print min @M }'
perl -MList::Util=min -alne '$min = min @F; $rmin = $min unless defined $rmin && $min > $rmin; END { print $rmin }'

# 打印一行中最大的元素
perl -MList::Util=max -alne 'print max @F'

# 打印所有行里最大的元素
perl -MList::Util=max -alne '@M = (@M, @F); END { print max @M }'

# 用每个字段的绝对值替换其当前值
perl -alne 'print "@{[map { abs } @F]}"'

# 打印每一行总的字段(单词)和
perl -alne 'print scalar @F'

# 在每行行首前打印该行总的字段和
perl -alne 'print scalar @F, " $_"'

# 计算所有行字段数的总和
perl -alne '$t += @F; END { print $t}'

# 打印匹配某个正则的总和
perl -alne 'map { /regex/ && $t++ } @F; END { print $t }'
perl -alne '$t += /regex/ for @F; END { print $t }'
perl -alne '$t += grep /regex/, @F; END { print $t }'

# 打印匹配某个正则的总行数
perl -lne '/regex/ && $t++; END { print $t }'

# 打印圆周率，保留 n 为有效数字
perl -Mbignum=bpi -le 'print bpi(n)'

# 打印圆周率，保留 39 位有效数字
perl -Mbignum=PI -le 'print PI'

# Print the number E to n decimal places
perl -Mbignum=bexp -le 'print bexp(1,n+1)'

# Print the number E to 39 decimal places
perl -Mbignum=e -le 'print e'

# 打印系统 UNIX 时间 (从 UTC 1970.1.1 00:00:00 到现在的秒数)
perl -le 'print time'

# 打印 GMT 时间(格林威治时间) 和本机的系统时间
perl -le 'print scalar gmtime'
perl -le 'print scalar localtime'

# 以 小时:分钟:秒 格式打印本机系统时间
perl -le 'print join ":", (localtime)[2,1,0]'

# 打印昨天的时间
perl -MPOSIX -le '@now = localtime; $now[3] -= 1; print scalar localtime mktime @now'

# 打印 14 个月 9 天 7 秒前的时间
perl -MPOSIX -le '@now = localtime; $now[0] -= 7; $now[4] -= 14; $now[7] -= 9; print scalar localtime mktime @now'

# 在每行的输出前加上时间戳( 格林威治时间，本地时间)
tail -f logfile | perl -ne 'print scalar gmtime," ",$_'
tail -f logfile | perl -ne 'print scalar localtime," ",$_'

# 计算 5 阶乘
perl -MMath::BigInt -le 'print Math::BigInt->new(5)->bfac()'
perl -le '$f = 1; $f *= $_ for 1..5; print $f'

# 计算最大公约数
perl -MMath::BigInt=bgcd -le 'print bgcd(@list_of_numbers)'

# 使用 Euclid 算法计算 20 和 35 的最大公约数
perl -le '$n = 20; $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $m'

# 计算 35，20，8 的最小公倍数
perl -MMath::BigInt=blcm -le 'print blcm(35,20,8)'

# 使用 Euclid 公式( n*m/gcd(n,m) )计算 20 和 35 的最小公倍数
perl -le '$a = $n = 20; $b = $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $a*$b/$m'

# 在 5-15 间生成 10 个随机数，不包含 15
perl -le '$n=10; $min=5; $max=15; $, = " "; print map { int(rand($max-$min))+$min } 1..$n'

# Find and print all permutations of a list
perl -MAlgorithm::Permute -le '$l = [1,2,3,4,5]; $p = Algorithm::Permute->new($l); print @r while @r = $p->next'

# Generate the power set
perl -MList::PowerSet=powerset -le '@l = (1,2,3,4,5); for (@{powerset(@l)}) { print "@$_" }'

# 将 IP 地址转换为无符号的数字
perl -le '$i=3; $u += ($_<<8*$i--) for "127.0.0.1" =~ /(\d+)/g; print $u'
perl -le '$ip="127.0.0.1"; $ip =~ s/(\d+)\.?/sprintf("%02x", $1)/ge; print hex($ip)'
perl -le 'print unpack("N", 127.0.0.1)'
perl -MSocket -le 'print unpack("N", inet_aton("127.0.0.1"))'

# 将一个无符号的数字转换成 IP 地址
perl -MSocket -le 'print inet_ntoa(pack("N", 2130706433))'
perl -le '$ip = 2130706433; print join ".", map { (($ip>>8*($_))&0xFF) } reverse 0..3'
perl -le '$ip = 2130706433; $, = "."; print map { (($ip>>8*($_))&0xFF) } reverse 0..3'


生成字符串和数组
----------------------------------

# 生成并打印字母
perl -le 'print a..z'
perl -le 'print ("a".."z")'
perl -le '$, = ","; print ("a".."z")'
perl -le 'print join ",", ("a".."z")'

# 生成所有 "a" 到 "zz" 的字符，并打印它们
perl -le 'print ("a".."zz")'
perl -le 'print "aa".."zz"'

# Create a hex lookup table
@hex = (0..9, "a".."f")

# Convert a decimal number to hex using @hex lookup table
perl -le '$num = 255; @hex = (0..9, "a".."f"); while ($num) { $s = $hex[($num%16)&15].$s; $num = int $num/16 } print $s'
perl -le '$hex = sprintf("%x", 255); print $hex'
perl -le '$num = "ff"; print hex $num'

# 随机生成 8 个字符组成的密码
perl -le 'print map { ("a".."z")[rand 26] } 1..8'
perl -le 'print map { ("a".."z", 0..9)[rand 36] } 1..8'

# 生成定长的字符串
perl -le 'print "a"x50'

# Create a repeated list of elements
perl -le '@list = (1,2)x20; print "@list"'

# 利用字符串生成数组
@months = split ' ', "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"
@months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/

# 使用数组生成字符串
@stuff = ("hello", 0..9, "world"); $string = join '-', @stuff

# 将字符串中的字符转换成其 ASCII 码对应的数字
perl -le 'print join ", ", map { ord } split //, "hello world"'

# 将一列 ASCII 数字转换成一个字符串
perl -le '@ascii = (99, 111, 100, 105, 110, 103); print pack("C*", @ascii)'
perl -le '@ascii = (99, 111, 100, 105, 110, 103); print map { chr } @ascii'

# 使用 1 到 100 间的奇数生成一个数组
perl -le '@odd = grep {$_ % 2 == 1} 1..100; print "@odd"'
perl -le '@odd = grep { $_ & 1 } 1..100; print "@odd"'

# 使用 1 到 100 间的偶数生成一个数组
perl -le '@even = grep {$_ % 2 == 0} 1..100; print "@even"'

# 求字符串的长度
perl -le 'print length "one-liners are great"'

# 显示数组中元素的个数
perl -le '@array = ("a".."z"); print scalar @array'
perl -le '@array = ("a".."z"); print $#array + 1'


文本操作和转换
--------------------------------

# ROT13 a string
'y/A-Za-z/N-ZA-Mn-za-m/'

# ROT 13 a file
perl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file

# 使用 Base64 编码字符串
perl -MMIME::Base64 -e 'print encode_base64("string")'
perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file

# 使用 Base64 解码字符串
perl -MMIME::Base64 -le 'print decode_base64("base64string")'
perl -MMIME::Base64 -ne 'print decode_base64($_)' file

# URL-escape a string
perl -MURI::Escape -le 'print uri_escape($string)'

# URL-unescape a string
perl -MURI::Escape -le 'print uri_unescape($string)'

# HTML-encode a string
perl -MHTML::Entities -le 'print encode_entities($string)'

# HTML-decode a string
perl -MHTML::Entities -le 'print decode_entities($string)'

# 转换所有文本到大写格式
perl -nle 'print uc'
perl -ple '$_=uc'
perl -nle 'print "\U$_"'

# 转换所有文本到小写格式
perl -nle 'print lc'
perl -ple '$_=lc'
perl -nle 'print "\L$_"'

# 对每一行的首字母大写
perl -nle 'print ucfirst lc'
perl -nle 'print "\u\L$_"'

# Invert the letter case
perl -ple 'y/A-Za-z/a-zA-Z/'

# 使用骆驼规则处理每行
perl -ple 's/(\w+)/\u$1/g'
perl -ple 's/(?<!['])(\w+)/\u\1/g'

# 丢掉行首的空白字符(空白符，制表符)
perl -ple 's/^[ \t]+//'
perl -ple 's/^\s+//'

# 丢掉行尾的空白字符(空白符，制表符)
perl -ple 's/[ \t]+$//'

# 丢掉行首和行尾的空白符
perl -ple 's/^[ \t]+|[ \t]+$//g'

# 将 UNIX 新行转换成 DOS/Windows 格式
perl -pe 's|\n|\r\n|'

# Convert DOS/Windows newlines to UNIX newlines
perl -pe 's|\r\n|\n|'

# Convert UNIX newlines to Mac newlines
perl -pe 's|\n|\r|'

# Substitute (find and replace) "foo" with "bar" on each line
perl -pe 's/foo/bar/'

# Substitute (find and replace) all "foo"s with "bar" on each line
perl -pe 's/foo/bar/g'

# Substitute (find and replace) "foo" with "bar" on lines that match "baz"
perl -pe '/baz/ && s/foo/bar/'

# Binary patch a file (find and replace a given array of bytes as hex numbers)
perl -pi -e 's/\x89\xD8\x48\x8B/\x90\x90\x48\x8B/g' file


SELECTIVE PRINTING AND DELETING OF CERTAIN LINES
------------------------------------------------

# Print the first line of a file (emulate head -1)
perl -ne 'print; exit'

# Print the first 10 lines of a file (emulate head -10)
perl -ne 'print if $. <= 10'
perl -ne '$. <= 10 && print'
perl -ne 'print if 1..10'

# Print the last line of a file (emulate tail -1)
perl -ne '$last = $_; END { print $last }'
perl -ne 'print if eof'

# Print the last 10 lines of a file (emulate tail -10)
perl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END { print @a }'

# Print only lines that match a regular expression
perl -ne '/regex/ && print'

# Print only lines that do not match a regular expression
perl -ne '!/regex/ && print'

# Print the line before a line that matches a regular expression
perl -ne '/regex/ && $last && print $last; $last = $_'

# Print the line after a line that matches a regular expression
perl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/'

# Print lines that match regex AAA and regex BBB in any order
perl -ne '/AAA/ && /BBB/ && print'

# Print lines that don't match match regexes AAA and BBB
perl -ne '!/AAA/ && !/BBB/ && print'

# Print lines that match regex AAA followed by regex BBB followed by CCC
perl -ne '/AAA.*BBB.*CCC/ && print'

# Print lines that are 80 chars or longer
perl -ne 'print if length >= 80'

# Print lines that are less than 80 chars in length
perl -ne 'print if length < 80'

# Print only line 13
perl -ne '$. == 13 && print && exit'

# Print all lines except line 27
perl -ne '$. != 27 && print'
perl -ne 'print if $. != 27'

# Print only lines 13, 19 and 67
perl -ne 'print if $. == 13 || $. == 19 || $. == 67'
perl -ne 'print if int($.) ~~ (13, 19, 67)' 

# Print all lines between two regexes (including lines that match regex)
perl -ne 'print if /regex1/../regex2/'

# Print all lines from line 17 to line 30
perl -ne 'print if $. >= 17 && $. <= 30'
perl -ne 'print if int($.) ~~ (17..30)'
perl -ne 'print if grep { $_ == $. } 17..30'

# Print the longest line
perl -ne '$l = $_ if length($_) > length($l); END { print $l }'

# Print the shortest line
perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) < length($s); END { print $s }'

# Print all lines that contain a number
perl -ne 'print if /\d/'

# Find all lines that contain only a number
perl -ne 'print if /^\d+$/'

# Print all lines that contain only characters
perl -ne 'print if /^[[:alpha:]]+$/

# Print every second line
perl -ne 'print if $. % 2'

# Print every second line, starting the second line
perl -ne 'print if $. % 2 == 0'

# Print all lines that repeat
perl -ne 'print if ++$a{$_} == 2'

# Print all unique lines
perl -ne 'print unless $a{$_}++'

# Print the first field (word) of every line (emulate cut -f 1 -d ' ')
perl -alne 'print $F[0]'


HANDY REGULAR EXPRESSIONS
-------------------------

# Match something that looks like an IP address
/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/
/^(\d{1,3}\.){3}\d{1,3}$/

# Test if a number is in range 0-255
/^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/

# Match an IP address
my $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|;
if ($ip =~ /^($ip_part\.){3}$ip_part$/) {
 say "valid ip";
}

# Check if the string looks like an email address
/\S+@\S+\.\S+/

# Check if the string is a decimal number
/^\d+$/
/^[+-]?\d+$/
/^[+-]?\d+\.?\d*$/

# Check if the string is a hexadecimal number
/^0x[0-9a-f]+$/i

# Check if the string is an octal number
/^0[0-7]+$/

# Check if the string is binary
/^[01]+$/

# Check if a word appears twice in the string
/(word).*\1/

# Increase all numbers by one in the string
$str =~ s/(\d+)/$1+1/ge

# Extract HTTP User-Agent string from the HTTP headers
/^User-Agent: (.+)$/

# Match printable ASCII characters
/[ -~]/

# Match unprintable ASCII characters
/[^ -~]/

# Match text between two HTML tags
m|<strong>([^<]*)</strong>|
m|<strong>(.*?)</strong>|

# Replace all <b> tags with <strong>
$html =~ s|<(/)?b>|<$1strong>|g

# Extract all matches from a regular expression
my @matches = $text =~ /regex/g;


PERL TRICKS
-----------

# Print the version of a Perl module
perl -MModule -le 'print $Module::VERSION'
perl -MLWP::UserAgent -le 'print $LWP::UserAgent::VERSION'


PERL ONE-LINERS EXPLAINED E-BOOK
--------------------------------

I have written an ebook based on the one-liners in this file. If you wish to
support my work and learn more about these one-liners, you can get a copy
of my ebook at:

    http://www.catonmat.net/blog/perl-book/

The ebook is based on the 7-part article series that I wrote on my blog.
In the ebook I reviewed all the one-liners, improved explanations, added
new ones, and added two new chapters - introduction to Perl one-liners
and summary of commonly used special variables.

You can read the original article series here:

    http://www.catonmat.net/blog/perl-one-liners-explained-part-one/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-two/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-three/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-four/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-five/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-six/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-seven/


CREDITS
-------

Andy Lester       http://www.petdance.com
Shlomi Fish       http://www.shlomifish.org
Madars Virza      http://www.madars.org
caffecaldo        https://github.com/caffecaldo
Kirk Kimmel       https://github.com/kimmel
avar              https://github.com/avar
rent0n


FOUND A BUG? HAVE ANOTHER ONE-LINER?
------------------------------------

Email bugs and new one-liners to me at peter@catonmat.net!


HAVE FUN
--------

I hope you found these one-liners useful. Have fun!

#---end of file---
